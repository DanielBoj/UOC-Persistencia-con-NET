{"ast":null,"code":"import _asyncToGenerator from \"C:/VirtualMachines/UOC-Persistencia-con-NET/GenteFit/GenteFit/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Dias } from 'src/app/models/dias';\nimport { Subscription, catchError, tap, throwError } from 'rxjs';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/horarios.service\";\nimport * as i2 from \"src/app/services/user.service\";\nimport * as i3 from \"src/app/services/redux.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/input\";\nimport * as i13 from \"@angular/material/autocomplete\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"@angular/material/table\";\nimport * as i16 from \"@angular/material/paginator\";\nimport * as i17 from \"@angular/material/sort\";\nfunction CreatereservaComponent_mat_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵlistener(\"click\", function CreatereservaComponent_mat_option_19_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const nombre_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onSelectChange(nombre_r14));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const nombre_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", nombre_r14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(nombre_r14);\n  }\n}\nfunction CreatereservaComponent_th_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 23);\n    i0.ɵɵtext(1, \"D\\u00EDa\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatereservaComponent_td_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r17 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r17.dia);\n  }\n}\nfunction CreatereservaComponent_th_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 23);\n    i0.ɵɵtext(1, \"Hora\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatereservaComponent_td_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r18 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r18.hora);\n  }\n}\nfunction CreatereservaComponent_th_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 23);\n    i0.ɵɵtext(1, \"Clase\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatereservaComponent_td_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r19.clase.nombre);\n  }\n}\nfunction CreatereservaComponent_th_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1, \"Crear\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatereservaComponent_td_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 24)(1, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function CreatereservaComponent_td_38_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const row_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onSelect(row_r20.id));\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"create\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction CreatereservaComponent_tr_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 27);\n  }\n}\nfunction CreatereservaComponent_tr_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 28);\n  }\n}\nfunction CreatereservaComponent_tr_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 29)(1, \"td\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(25);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" No existen datos para el filtro \\\"\", _r2.value, \"\\\" \");\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25, 100];\n};\nexport let CreatereservaComponent = /*#__PURE__*/(() => {\n  class CreatereservaComponent {\n    constructor(apiHorario, apiCliente, redux, snackbar) {\n      var _this = this;\n      this.apiHorario = apiHorario;\n      this.apiCliente = apiCliente;\n      this.redux = redux;\n      this.snackbar = snackbar;\n      // Datos del estado de la apliación, lo necesitamos para obtener el usuario logeado\n      this.cache$ = new Subscription();\n      // Creamos los contenedores para trabajar con la clase\n      this.horarios$ = new Subscription();\n      this.horarios = [];\n      this.cliente$ = new Subscription();\n      // Insertamos los array para la búsqueda y filtrado\n      this.nombresClases = [];\n      this.subscriptions = [];\n      // Creamos un array con los horarios filtrados\n      this.horariosFiltrados = [];\n      // Creamos los días para el select y el día seleccionado\n      this.dias = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];\n      // Creamos los datos para generar la tabla de opciones\n      // Tabla dinámica\n      this.displayedColumns = ['dia', 'hora', 'clase.nombre', 'crear'];\n      this.dataSource = new MatTableDataSource();\n      // Modelo vacío para la reserva\n      this.reservaModel = {\n        horario: {\n          dia: 0,\n          hora: '',\n          clase: {\n            id: '',\n            nombre: '',\n            descripcion: '',\n            profesor: '',\n            duracion: 0,\n            plazas: 0\n          }\n        },\n        cliente: {\n          id: '',\n          email: '',\n          pass: '',\n          nombre: '',\n          nif: '',\n          direccion: {\n            id: '',\n            domicilio: '',\n            poblacion: '',\n            cp: 0,\n            pais: ''\n          },\n          telefono: '',\n          genero: 0,\n          iban: '',\n          tipo: 'cliente'\n        }\n      };\n      // Modelo vacío para la espera\n      this.esperaModel = {\n        horario: {\n          dia: 0,\n          hora: '',\n          clase: {\n            id: '',\n            nombre: '',\n            descripcion: '',\n            profesor: '',\n            duracion: 0,\n            plazas: 0\n          }\n        },\n        cliente: {\n          id: '',\n          email: '',\n          pass: '',\n          nombre: '',\n          nif: '',\n          direccion: {\n            id: '',\n            domicilio: '',\n            poblacion: '',\n            cp: 0,\n            pais: ''\n          },\n          telefono: '',\n          genero: 0,\n          iban: '',\n          tipo: 'cliente'\n        }\n      };\n      // Guardamos la reserva en la BD.\n      this.createReserva = /*#__PURE__*/_asyncToGenerator(function* () {\n        // Generamos el elemento a crear\n        _this.reservaModel.horario = _this.horario;\n        _this.reservaModel.cliente = _this.cliente;\n        // Convertimos el dia a número usando la clase enum Dias\n        _this.reservaModel.horario.dia = Dias[_this.reservaModel.horario.dia];\n        // Creamos el objeto a guardar\n        const toSave = _this.reservaModel;\n        toSave.id = '';\n        // Obtenemos la id del cliente\n        const idCliente = _this.cliente.id;\n        // Obtenemos la id del horario\n        const idHorario = _this.horario.id;\n        // Llamamos a la función de creación del servicio\n        // Hay que enviarle el id del cliente y el id del horario\n        _this.apiHorario.createReserva(idCliente, idHorario, toSave).pipe(tap(res => {\n          if (res) {\n            _this.createReservaSuccess();\n          }\n        }), catchError(error => {\n          _this.createReservaError();\n          return throwError(() => error.ok);\n        })).subscribe();\n        // this.apiHorario.createReserva(idCliente, idHorario, toSave).subscribe(\n        //   (res: any) => {\n        //     console.log(res);\n        //     if (res.ok) {\n        //       this.createReservaSuccess();\n        //     } else {\n        //       this.createReservaError();\n        //     }\n        //   },\n        //   (error: HttpErrorResponse) => {\n        //     this.createReservaError();\n        //   }\n        // );\n      });\n      // Mensaje de éxito al crear una espera\n      this.createReservaSuccess = () => {\n        this.snackbar.open('Reserva creada con éxito', 'Cerrar', {\n          duration: 5000,\n          horizontalPosition: 'center',\n          verticalPosition: 'top'\n        });\n      };\n      // Creamos un mensaje de error mediante snackbar, ofrecerá la posibilidad\n      // crear una espera en caso de que la reserva no se haya podido crear\n      // o de cancelar la creación de la reserva\n      this.createReservaError = () => {\n        const snackbarRef = this.snackbar.open('No se ha podido crear la reserva, ¿desea crear una espera?', 'Crear Espera', {\n          duration: 5000,\n          horizontalPosition: 'center',\n          verticalPosition: 'top'\n        });\n        // Si se pulsa el botón de crear, se creará una espera\n        snackbarRef.onAction().subscribe(() => {\n          this.createEspera();\n        });\n      };\n      // Guardamos la reserva en la BD.\n      this.createEspera = /*#__PURE__*/_asyncToGenerator(function* () {\n        // Generamos el elemento a crear\n        _this.esperaModel.horario = _this.horario;\n        _this.esperaModel.cliente = _this.cliente;\n        // Creamos el objeto a guardar\n        const toSave = _this.esperaModel;\n        toSave.id = '';\n        // Obtenemos la id del cliente\n        const idCliente = _this.cliente.id || '';\n        // Obtenemos la id del horario\n        const idHorario = _this.horario.id || '';\n        // Llamamos a la función de creación del servicio\n        // Hay que enviarle el id del cliente y el id del horario\n        _this.apiHorario.createEspera(idCliente, idHorario, toSave).pipe(tap(res => {\n          if (res) {\n            _this.createEsperaSuccess();\n          }\n        }), catchError(error => {\n          _this.createEsperaError();\n          return throwError(() => error.ok);\n        })).subscribe();\n      });\n      // Mensaje de éxito al crear una espera\n      this.createEsperaSuccess = () => {\n        this.snackbar.open('Espera creada con éxito', 'Cerrar', {\n          duration: 5000,\n          horizontalPosition: 'center',\n          verticalPosition: 'top'\n        });\n      };\n      // Creamos un mensaje de error mediante snackbar, ofrecerá la posibilidad\n      // crear una espera en caso de que la reserva no se haya podido crear\n      // o de cancelar la creación de la reserva\n      this.createEsperaError = () => {\n        const snackbarRef = this.snackbar.open('No se ha podido crear la espera', 'Cerrar', {\n          duration: 5000,\n          horizontalPosition: 'center',\n          verticalPosition: 'top'\n        });\n      };\n      // Obtenemos una lista filtrada con los nombres de las clases disponibles\n      this.onSearch = event => {\n        // Obtenemos el valor del input\n        const nombre = event.target.value;\n        // Filtramos los horarios por el nombre de la clase y los asignamos al array de horarios filtrados\n        this.horariosFiltrados = this.horarios.filter(horario => horario.clase.nombre.toLowerCase().includes(nombre.toLowerCase()));\n        // Renovamos los datos de la tabla dinámica\n        this.dataSource = new MatTableDataSource(this.horariosFiltrados);\n      };\n      // Repetimos la lógica para un retorno de datos al seleccionar una opción de la lista\n      this.onSelectChange = nombre => {\n        // Filtramos los horarios por el nombre de la clase y los asignamos al array de horarios filtrados\n        this.horariosFiltrados = this.horarios.filter(horario => horario.clase.nombre.toLowerCase().includes(nombre.toLowerCase()));\n        // Renovamos los datos de la tabla dinámica\n        this.dataSource = new MatTableDataSource(this.horariosFiltrados);\n      };\n      // Creamos la lógica para la selección de un horario de la tabla\n      this.onSelect = id => {\n        // Asignamos el horario seleccionado\n        this.horario = this.horarios.find(horario => horario.id === id);\n        // Llamamos a la función de creación de la reserva\n        this.createReserva();\n      };\n      // Obtenemos el estado de la aplicación\n      // getLocalStore = (): void => {\n      //   this.tipoUsuario = this.redux.getTipoUsuario();\n      //   this.idUsuario = this.redux.getIdUsuario();\n      // }\n      // Filtramos los datos de la tabla\n      this.applyFilter = event => {\n        const filterValue = event.target.value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n        if (this.dataSource.paginator) {\n          this.dataSource.paginator.firstPage();\n        }\n      };\n    }\n    ngOnInit() {\n      // Obtenemos antes que nada el usuario logeado\n      this.subscriptions.push(this.cache$ = this.redux.getCache().subscribe(cache => {\n        // Guardamos el usuario logeado\n        this.cache = cache;\n        // Guardamos el id del usuario logeado\n        this.idUsuario = this.cache.idUsuario;\n        // Guardamos el tipo de usuario logeado\n        this.tipoUsuario = this.cache.tipoUsuario;\n      }));\n      // Obtenemos todos los horarios\n      this.subscriptions.push(this.horarios$ = this.apiHorario.getHorarios().subscribe(horarios => {\n        // Guardamos los horarios obtenidos\n        this.horarios = horarios;\n        // Convertimos el día a string usando la clase enum Dias\n        this.horarios.forEach(horario => {\n          horario.dia = Dias[horario.dia];\n        });\n        // Generamos un array con los nombres de las clases y eliminamos los duplicados convirtiendo el Array en un Set, ya que los set no pueden contener duplicados.\n        this.nombresClases = this.horarios.map(horario => horario.clase.nombre);\n        // Ordenamos el array alfabéticamente\n        this.nombresClases.sort();\n        // Lo convertimos en un Set para eliminar duplicados\n        this.nombresClases = [...new Set(this.nombresClases)];\n        // Generamos un array con los horarios filtrados\n        this.horariosFiltrados = this.horarios;\n        // Creamos los datos para la tabla dinámica\n        this.dataSource = new MatTableDataSource(this.horariosFiltrados);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n        // Añadimos el filtrado por datos anidados\n        this.dataSource.filterPredicate = (data, filter) => {\n          const dataStr = JSON.stringify(data).toLowerCase();\n          return dataStr.indexOf(filter) != -1;\n        };\n      }));\n      // Obtenemos el cliente\n      this.subscriptions.push(this.cliente$ = this.apiCliente.getCliente(this.idUsuario).subscribe(cliente => {\n        // Guardamos el cliente obtenido\n        this.cliente = cliente;\n      }));\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n    // Asignamos el paginador y el ordenador para nuestra tabla dinámica\n    ngAfterViewInit() {\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    }\n  }\n  CreatereservaComponent.ɵfac = function CreatereservaComponent_Factory(t) {\n    return new (t || CreatereservaComponent)(i0.ɵɵdirectiveInject(i1.HorariosService), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ReduxService), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n  };\n  CreatereservaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatereservaComponent,\n    selectors: [[\"app-createreserva\"]],\n    viewQuery: function CreatereservaComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 43,\n    vars: 7,\n    consts: [[\"mat-fab\", \"\", \"color\", \"primary\", \"routerLink\", \"/horarios\", 1, \"mat-button\"], [1, \"form-box\"], [1, \"reserva-form\"], [\"color\", \"accent\", 1, \"search\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"clases\", \"name\", \"clase\", 3, \"matAutocomplete\", \"input\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-elevation-z8\"], [\"matInput\", \"\", \"placeholder\", \"Clase\", 3, \"keyup\"], [\"input\", \"\"], [\"mat-table\", \"\", \"matSort\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"dia\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"hora\"], [\"matColumnDef\", \"clase.nombre\"], [\"matColumnDef\", \"crear\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"class\", \"mat-row\", 4, \"matNoDataRow\"], [\"aria-label\", \"Clases\", 3, \"pageSizeOptions\"], [3, \"value\", \"click\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-cell\", \"\"], [\"mat-icon-button\", \"\", \"routerLink\", \"/reservas\", 3, \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [1, \"mat-row\"], [\"colspan\", \"4\", 1, \"mat-cell\"]],\n    template: function CreatereservaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"header\")(1, \"button\", 0)(2, \"mat-icon\");\n        i0.ɵɵtext(3, \"arrow_back\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementContainerStart(4, 1);\n        i0.ɵɵelementStart(5, \"ng-form\", 2)(6, \"mat-card\")(7, \"mat-card-header\")(8, \"mat-card-title\")(9, \"h1\");\n        i0.ɵɵtext(10, \"Crear Reserva\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"mat-card-content\")(12, \"div\")(13, \"mat-form-field\", 3)(14, \"mat-label\");\n        i0.ɵɵtext(15, \"B\\u00FAsqueda de clases\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 4);\n        i0.ɵɵlistener(\"input\", function CreatereservaComponent_Template_input_input_16_listener($event) {\n          return ctx.onSearch($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-autocomplete\", null, 5);\n        i0.ɵɵtemplate(19, CreatereservaComponent_mat_option_19_Template, 2, 2, \"mat-option\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(20, \"div\", 7)(21, \"mat-form-field\")(22, \"mat-label\");\n        i0.ɵɵtext(23, \"Filtro\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"input\", 8, 9);\n        i0.ɵɵlistener(\"keyup\", function CreatereservaComponent_Template_input_keyup_24_listener($event) {\n          return ctx.applyFilter($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"table\", 10);\n        i0.ɵɵelementContainerStart(27, 11);\n        i0.ɵɵtemplate(28, CreatereservaComponent_th_28_Template, 2, 0, \"th\", 12);\n        i0.ɵɵtemplate(29, CreatereservaComponent_td_29_Template, 2, 1, \"td\", 13);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(30, 14);\n        i0.ɵɵtemplate(31, CreatereservaComponent_th_31_Template, 2, 0, \"th\", 12);\n        i0.ɵɵtemplate(32, CreatereservaComponent_td_32_Template, 2, 1, \"td\", 13);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(33, 15);\n        i0.ɵɵtemplate(34, CreatereservaComponent_th_34_Template, 2, 0, \"th\", 12);\n        i0.ɵɵtemplate(35, CreatereservaComponent_td_35_Template, 2, 1, \"td\", 13);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(36, 16);\n        i0.ɵɵtemplate(37, CreatereservaComponent_th_37_Template, 2, 0, \"th\", 17);\n        i0.ɵɵtemplate(38, CreatereservaComponent_td_38_Template, 4, 0, \"td\", 13);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(39, CreatereservaComponent_tr_39_Template, 1, 0, \"tr\", 18);\n        i0.ɵɵtemplate(40, CreatereservaComponent_tr_40_Template, 1, 0, \"tr\", 19);\n        i0.ɵɵtemplate(41, CreatereservaComponent_tr_41_Template, 3, 1, \"tr\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(42, \"mat-paginator\", 21);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementContainerEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(18);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.nombresClases);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"pageSizeOptions\", i0.ɵɵpureFunction0(6, _c0));\n      }\n    },\n    dependencies: [i5.NgForOf, i6.RouterLink, i7.NgForm, i8.MatFormField, i8.MatLabel, i9.MatIconButton, i9.MatFabButton, i10.MatCard, i10.MatCardContent, i10.MatCardHeader, i10.MatCardTitle, i11.MatIcon, i12.MatInput, i13.MatAutocomplete, i14.MatOption, i13.MatAutocompleteTrigger, i15.MatTable, i15.MatHeaderCellDef, i15.MatHeaderRowDef, i15.MatColumnDef, i15.MatCellDef, i15.MatRowDef, i15.MatHeaderCell, i15.MatCell, i15.MatHeaderRow, i15.MatRow, i15.MatNoDataRow, i16.MatPaginator, i17.MatSort, i17.MatSortHeader],\n    styles: [\"body[_ngcontent-%COMP%]{background-color:#0000}\"]\n  });\n  return CreatereservaComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}