{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { Genero } from 'src/app/models/genero';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/redux.service\";\nimport * as i2 from \"src/app/services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/grid-list\";\nimport * as i8 from \"@angular/material/icon\";\nfunction DetailclienteComponent_mat_card_content_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card-content\")(1, \"mat-grid-list\", 3)(2, \"mat-grid-tile\")(3, \"h3\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"mat-grid-tile\")(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const element_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(element_r1.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(element_r1.value);\n  }\n}\nexport let DetailclienteComponent = /*#__PURE__*/(() => {\n  class DetailclienteComponent {\n    constructor(reduxService, userService, route) {\n      this.reduxService = reduxService;\n      this.userService = userService;\n      this.route = route;\n      // Estado de la aplicación\n      this.cache$ = new Subscription();\n      // Información para la cabecera de la página\n      this.title = \"GentFit\";\n      this.subtitle = \"Información del cliente\";\n      // Contenedor para los datos del cliente obtenidos de la API\n      this.cliente$ = new Subscription();\n      this.subscripts = [];\n      // Modelo de cliente para la card de información del cliente\n      this.clienteData = [{\n        name: 'Nombre',\n        value: ''\n      }, {\n        name: 'Email',\n        value: ''\n      }, {\n        name: 'NIF',\n        value: ''\n      }, {\n        name: 'Dirección',\n        value: ''\n      }, {\n        name: 'Población',\n        value: ''\n      }, {\n        name: 'Código postal',\n        value: ''\n      }, {\n        name: 'País',\n        value: ''\n      }, {\n        name: 'Teléfono',\n        value: ''\n      }, {\n        name: 'Género',\n        value: ''\n      }, {\n        name: 'IBAN',\n        value: ''\n      }];\n      this.updateCardData = cliente => {\n        this.clienteData = [{\n          name: 'Nombre',\n          value: cliente.nombre\n        }, {\n          name: 'Email',\n          value: cliente.email\n        }, {\n          name: 'NIF',\n          value: cliente.nif\n        }, {\n          name: 'Dirección',\n          value: cliente.direccion.domicilio\n        }, {\n          name: 'Población',\n          value: cliente.direccion.poblacion\n        }, {\n          name: 'Código postal',\n          value: cliente.direccion.cp\n        }, {\n          name: 'País',\n          value: cliente.direccion.pais\n        }, {\n          name: 'Teléfono',\n          value: cliente.telefono\n        }, {\n          name: 'Género',\n          value: cliente.genero\n        }, {\n          name: 'IBAN',\n          value: cliente.iban\n        }];\n      };\n    }\n    ngOnInit() {\n      // Primero obtenemos la ID de la url para poder buscar el cliente en la BD.\n      // Lo obtenemos como una subscripción para que tenga un carácter asíncrono\\\n      this.subscripts.push(this.route.params.subscribe(params => this.id = params['id']));\n      // Obtenemos el estado de la aplicación\n      this.subscripts.push(this.reduxService.getCache().subscribe(state => {\n        this.cache = state;\n        this.idUsuario = state.idUsuario;\n        this.tipoUsuario = state.tipoUsuario;\n      }));\n      // Consumimos la API para obtener los datos del cliente\n      this.subscripts.push(this.userService.getCliente(this.id).subscribe(cliente => {\n        // Cargamos los datos del cliente\n        this.cliente = cliente;\n        this.nombreCliente = cliente.nombre;\n        // Convertimos el género a travé del enum Genero\n        this.cliente.genero = Genero[this.cliente.genero];\n        // Actualizamos el modelo de la card de información del cliente\n        this.updateCardData(cliente);\n      }));\n    }\n    ngOnDestroy() {\n      // Dejamos de oir los eventos asíncronos al destruir el componente\n      this.subscripts.forEach(sub => sub.unsubscribe());\n    }\n  }\n  DetailclienteComponent.ɵfac = function DetailclienteComponent_Factory(t) {\n    return new (t || DetailclienteComponent)(i0.ɵɵdirectiveInject(i1.ReduxService), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  DetailclienteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DetailclienteComponent,\n    selectors: [[\"app-detailcliente\"]],\n    decls: 18,\n    vars: 2,\n    consts: [[\"mat-fab\", \"\", \"color\", \"primary\", \"routerLink\", \"/clientes\", 1, \"mat-button\"], [1, \"card-box\"], [4, \"ngFor\", \"ngForOf\"], [\"cols\", \"2\", \"rowHeight\", \"6rem\"]],\n    template: function DetailclienteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"header\")(1, \"button\", 0)(2, \"mat-icon\");\n        i0.ɵɵtext(3, \"arrow_back\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementContainerStart(4, 1);\n        i0.ɵɵelementStart(5, \"mat-card\")(6, \"mat-card-header\")(7, \"mat-card-title\")(8, \"h2\");\n        i0.ɵɵtext(9, \"Detalle del cliente\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"mat-card-subtitle\")(11, \"h3\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(13, DetailclienteComponent_mat_card_content_13_Template, 8, 2, \"mat-card-content\", 2);\n        i0.ɵɵelementStart(14, \"mat-card-actions\")(15, \"button\", 0)(16, \"mat-icon\");\n        i0.ɵɵtext(17, \"arrow_back\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementContainerEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(ctx.nombreCliente);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.clienteData);\n      }\n    },\n    dependencies: [i4.NgForOf, i3.RouterLink, i5.MatFabButton, i6.MatCard, i6.MatCardActions, i6.MatCardContent, i6.MatCardHeader, i6.MatCardSubtitle, i6.MatCardTitle, i7.MatGridList, i7.MatGridTile, i8.MatIcon],\n    styles: [\"body[_ngcontent-%COMP%]{background-color:#0000}\"]\n  });\n  return DetailclienteComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}