{"ast":null,"code":"import { of, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.url = 'http://localhost:5000/api';\n      // Obtenemos todos los usuarios\n      this.getUsers = () => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/users`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un array de usuarios\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          // En caso de error devolvemos un array vacío\n          return of([]);\n        }));\n      };\n      // Obtenemos el listado de clientes\n      this.getClientes = () => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/cliente`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un array de clientes\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          // En caso de error devolvemos un array vacío\n          return of([]);\n        }));\n      };\n      // Obtenemos el cliente por su id\n      this.getCliente = id => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/cliente/${id}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un cliente\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          // En caso de error devolvemos un array vacío\n          return of();\n        }));\n      };\n      // Creamos un cliente\n      this.createCliente = cliente => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/cliente`;\n        // Realizamos la petición\n        let res;\n        try {\n          this.http.post(url, cliente).subscribe(data => res = data);\n        } catch (error) {\n          res = error.message;\n        }\n        return res;\n      };\n      // Editamos un cliente\n      this.editCliente = (id, cliente) => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/cliente/${id}`;\n        // Realizamos la petición\n        let res;\n        try {\n          this.http.put(url, cliente).subscribe(data => res = data);\n        } catch (error) {\n          res = error.message;\n        }\n        return res;\n      };\n      // Borramos un cliente\n      this.deleteCliente = id => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/cliente/${id}`;\n        // Realizamos la petición\n        try {\n          this.http.delete(url).subscribe(data => data);\n          return of(true);\n        } catch (error) {\n          return of(false);\n        }\n      };\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}