{"ast":null,"code":"import _asyncToGenerator from \"C:/GenteFit/GenteFit/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Dias } from 'src/app/models/dias';\nimport { Subscription } from 'rxjs';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/horarios.service\";\nimport * as i2 from \"src/app/services/user.service\";\nimport * as i3 from \"src/app/services/redux.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/card\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/autocomplete\";\nimport * as i13 from \"@angular/material/core\";\nimport * as i14 from \"@angular/material/table\";\nimport * as i15 from \"@angular/material/paginator\";\nimport * as i16 from \"@angular/material/sort\";\nfunction CreateesperaComponent_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵlistener(\"click\", function CreateesperaComponent_mat_option_15_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const nombre_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onSelectChange(nombre_r14));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const nombre_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", nombre_r14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(nombre_r14);\n  }\n}\nfunction CreateesperaComponent_th_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 22);\n    i0.ɵɵtext(1, \"D\\u00EDa\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateesperaComponent_td_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r17 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r17.dia);\n  }\n}\nfunction CreateesperaComponent_th_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 22);\n    i0.ɵɵtext(1, \"Hora\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateesperaComponent_td_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r18 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r18.hora);\n  }\n}\nfunction CreateesperaComponent_th_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 22);\n    i0.ɵɵtext(1, \"Clase\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateesperaComponent_td_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r19.clase.nombre);\n  }\n}\nfunction CreateesperaComponent_th_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 24);\n    i0.ɵɵtext(1, \"Crear\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateesperaComponent_td_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 23)(1, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function CreateesperaComponent_td_34_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const row_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onSelect(row_r20.id));\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"create\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction CreateesperaComponent_tr_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 26);\n  }\n}\nfunction CreateesperaComponent_tr_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 27);\n  }\n}\nfunction CreateesperaComponent_tr_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 28)(1, \"td\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(21);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" No existen datos para el filtro \\\"\", _r2.value, \"\\\" \");\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25, 100];\n};\nexport let CreateesperaComponent = /*#__PURE__*/(() => {\n  class CreateesperaComponent {\n    constructor(apiHorario, apiCliente, redux) {\n      var _this = this;\n      this.apiHorario = apiHorario;\n      this.apiCliente = apiCliente;\n      this.redux = redux;\n      // Datos del estado de la apliación, lo necesitamos para obtener el usuario logeado\n      this.cache$ = new Subscription();\n      // Creamos los contenedores para trabajar con la clase\n      this.horarios$ = new Subscription();\n      this.horarios = [];\n      this.cliente$ = new Subscription();\n      // Insertamos los array para la búsqueda y filtrado\n      this.nombresClases = [];\n      this.subscriptions = [];\n      // Creamos un array con los horarios filtrados\n      this.horariosFiltrados = [];\n      // Creamos los días para el select y el día seleccionado\n      this.dias = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];\n      // Creamos los datos para generar la tabla de opciones\n      // Tabla dinámica\n      this.displayedColumns = ['dia', 'hora', 'clase.nombre', 'crear'];\n      this.dataSource = new MatTableDataSource();\n      // Modelo vacío para la reserva\n      this.esperaModel = {\n        horario: {\n          dia: 0,\n          hora: '',\n          clase: {\n            id: '',\n            nombre: '',\n            descripcion: '',\n            profesor: '',\n            duracion: 0,\n            plazas: 0\n          }\n        },\n        cliente: {\n          id: '',\n          email: '',\n          pass: '',\n          nombre: '',\n          nif: '',\n          direccion: {\n            id: '',\n            domicilio: '',\n            poblacion: '',\n            cp: 0,\n            pais: ''\n          },\n          telefono: '',\n          genero: 0,\n          iban: '',\n          tipo: 'cliente',\n          reservas: undefined,\n          esperas: undefined\n        }\n      };\n      // Valor de retorno para la función de creación\n      this.isCreated = false;\n      this.isError = false;\n      // Guardamos la reserva en la BD.\n      this.createEspera = /*#__PURE__*/_asyncToGenerator(function* () {\n        // Generamos el elemento a crear\n        _this.esperaModel.horario = _this.horario;\n        _this.esperaModel.cliente = _this.cliente;\n        // Convertimos el dia a número usando la clase enum Dias\n        _this.esperaModel.horario.dia = Dias[_this.esperaModel.horario.dia];\n        // Creamos el objeto a guardar\n        const toSave = _this.esperaModel;\n        toSave.id = '';\n        // Obtenemos la id del cliente\n        const idCliente = _this.cliente.id || '';\n        // Obtenemos la id del horario\n        const idHorario = _this.horario.id || '';\n        // Llamamos a la función de creación del servicio\n        // Hay que enviarle el id del cliente y el id del horario\n        try {\n          _this.apiHorario.createEspera(idCliente, idHorario, toSave);\n          _this.isCreated = true;\n        } catch (error) {\n          _this.isError = true;\n        }\n      });\n      // Obtenemos una lista filtrada con los nombres de las clases disponibles\n      this.onSearch = event => {\n        // Obtenemos el valor del input\n        const nombre = event.target.value;\n        // Filtramos los horarios por el nombre de la clase y los asignamos al array de horarios filtrados\n        this.horariosFiltrados = this.horarios.filter(horario => horario.clase.nombre.toLowerCase().includes(nombre.toLowerCase()));\n        // Renovamos los datos de la tabla dinámica\n        this.dataSource = new MatTableDataSource(this.horariosFiltrados);\n      };\n      // Repetimos la lógica para un retorno de datos al seleccionar una opción de la lista\n      this.onSelectChange = nombre => {\n        // Filtramos los horarios por el nombre de la clase y los asignamos al array de horarios filtrados\n        this.horariosFiltrados = this.horarios.filter(horario => horario.clase.nombre.toLowerCase().includes(nombre.toLowerCase()));\n        // Renovamos los datos de la tabla dinámica\n        this.dataSource = new MatTableDataSource(this.horariosFiltrados);\n      };\n      // Creamos la lógica para la selección de un horario de la tabla\n      this.onSelect = id => {\n        // Asignamos el horario seleccionado\n        this.horario = this.horarios.find(horario => horario.id === id);\n        // Llamamos a la función de creación de la reserva\n        this.createEspera();\n      };\n      // Filtramos los datos de la tabla\n      this.applyFilter = event => {\n        const filterValue = event.target.value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n        if (this.dataSource.paginator) {\n          this.dataSource.paginator.firstPage();\n        }\n      };\n    }\n    ngOnInit() {\n      // Obtenemos antes que nada el usuario logeado\n      this.subscriptions.push(this.cache$ = this.redux.getCache().subscribe(cache => {\n        // Gardamos los datos\n        this.cache = cache;\n        this.idUsuario = this.cache.idUsuario;\n        this.tipoUsuario = this.cache.tipoUsuario;\n      }));\n      // Obtenemos todos los horarios\n      this.subscriptions.push(this.horarios$ = this.apiHorario.getHorarios().subscribe(horarios => {\n        // Guardamos los horarios obtenidos\n        this.horarios = horarios;\n        // Convertimos el día a string usando la clase enum Dias\n        this.horarios.forEach(horario => {\n          horario.dia = Dias[horario.dia];\n        });\n        // Generamos un array con los nombres de las clases y eliminamos los duplicados convirtiendo el Array en un Set, ya que los set no pueden contener duplicados.\n        this.nombresClases = this.horarios.map(horario => horario.clase.nombre);\n        // Ordenamos el array alfabéticamente\n        this.nombresClases.sort();\n        // Lo convertimos en un Set para eliminar duplicados\n        this.nombresClases = [...new Set(this.nombresClases)];\n        // Generamos un array con los horarios filtrados\n        this.horariosFiltrados = this.horarios;\n        // Creamos los datos para la tabla dinámica\n        this.dataSource = new MatTableDataSource(this.horariosFiltrados);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n        // Añadimos el filtrado por datos anidados\n        this.dataSource.filterPredicate = (data, filter) => {\n          const dataStr = JSON.stringify(data).toLowerCase();\n          return dataStr.indexOf(filter) != -1;\n        };\n      }));\n      // Obtenemos el cliente\n      this.subscriptions.push(this.cliente$ = this.apiCliente.getCliente(this.idUsuario).subscribe(cliente => {\n        // Guardamos el cliente obtenido\n        this.cliente = cliente;\n      }));\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n    // Asignamos el paginador y el ordenador para nuestra tabla dinámica\n    ngAfterViewInit() {\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    }\n  }\n  CreateesperaComponent.ɵfac = function CreateesperaComponent_Factory(t) {\n    return new (t || CreateesperaComponent)(i0.ɵɵdirectiveInject(i1.HorariosService), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ReduxService));\n  };\n  CreateesperaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateesperaComponent,\n    selectors: [[\"app-createespera\"]],\n    viewQuery: function CreateesperaComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 39,\n    vars: 7,\n    consts: [[1, \"form-box\"], [1, \"reserva-form\"], [\"color\", \"accent\", 1, \"search\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"clases\", \"name\", \"clase\", 3, \"matAutocomplete\", \"input\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-elevation-z8\"], [\"matInput\", \"\", \"placeholder\", \"Clase\", 3, \"keyup\"], [\"input\", \"\"], [\"mat-table\", \"\", \"matSort\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"dia\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"hora\"], [\"matColumnDef\", \"clase.nombre\"], [\"matColumnDef\", \"crear\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"class\", \"mat-row\", 4, \"matNoDataRow\"], [\"aria-label\", \"Clases\", 3, \"pageSizeOptions\"], [3, \"value\", \"click\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-cell\", \"\"], [\"mat-icon-button\", \"\", \"routerLink\", \"/horarios\", 3, \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [1, \"mat-row\"], [\"colspan\", \"4\", 1, \"mat-cell\"]],\n    template: function CreateesperaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, 0);\n        i0.ɵɵelementStart(1, \"ng-form\", 1)(2, \"mat-card\")(3, \"mat-card-header\")(4, \"mat-card-title\")(5, \"h1\");\n        i0.ɵɵtext(6, \"Crear Espera\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"div\")(9, \"mat-form-field\", 2)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"B\\u00FAsqueda de clases\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 3);\n        i0.ɵɵlistener(\"input\", function CreateesperaComponent_Template_input_input_12_listener($event) {\n          return ctx.onSearch($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-autocomplete\", null, 4);\n        i0.ɵɵtemplate(15, CreateesperaComponent_mat_option_15_Template, 2, 2, \"mat-option\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"div\", 6)(17, \"mat-form-field\")(18, \"mat-label\");\n        i0.ɵɵtext(19, \"Filtro\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 7, 8);\n        i0.ɵɵlistener(\"keyup\", function CreateesperaComponent_Template_input_keyup_20_listener($event) {\n          return ctx.applyFilter($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"table\", 9);\n        i0.ɵɵelementContainerStart(23, 10);\n        i0.ɵɵtemplate(24, CreateesperaComponent_th_24_Template, 2, 0, \"th\", 11);\n        i0.ɵɵtemplate(25, CreateesperaComponent_td_25_Template, 2, 1, \"td\", 12);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(26, 13);\n        i0.ɵɵtemplate(27, CreateesperaComponent_th_27_Template, 2, 0, \"th\", 11);\n        i0.ɵɵtemplate(28, CreateesperaComponent_td_28_Template, 2, 1, \"td\", 12);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(29, 14);\n        i0.ɵɵtemplate(30, CreateesperaComponent_th_30_Template, 2, 0, \"th\", 11);\n        i0.ɵɵtemplate(31, CreateesperaComponent_td_31_Template, 2, 1, \"td\", 12);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(32, 15);\n        i0.ɵɵtemplate(33, CreateesperaComponent_th_33_Template, 2, 0, \"th\", 16);\n        i0.ɵɵtemplate(34, CreateesperaComponent_td_34_Template, 4, 0, \"td\", 12);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(35, CreateesperaComponent_tr_35_Template, 1, 0, \"tr\", 17);\n        i0.ɵɵtemplate(36, CreateesperaComponent_tr_36_Template, 1, 0, \"tr\", 18);\n        i0.ɵɵtemplate(37, CreateesperaComponent_tr_37_Template, 3, 1, \"tr\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(38, \"mat-paginator\", 20);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementContainerEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(14);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.nombresClases);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"pageSizeOptions\", i0.ɵɵpureFunction0(6, _c0));\n      }\n    },\n    dependencies: [i4.NgForOf, i5.RouterLink, i6.NgForm, i7.MatFormField, i7.MatLabel, i8.MatIconButton, i9.MatCard, i9.MatCardContent, i9.MatCardHeader, i9.MatCardTitle, i10.MatIcon, i11.MatInput, i12.MatAutocomplete, i13.MatOption, i12.MatAutocompleteTrigger, i14.MatTable, i14.MatHeaderCellDef, i14.MatHeaderRowDef, i14.MatColumnDef, i14.MatCellDef, i14.MatRowDef, i14.MatHeaderCell, i14.MatCell, i14.MatHeaderRow, i14.MatRow, i14.MatNoDataRow, i15.MatPaginator, i16.MatSort, i16.MatSortHeader],\n    styles: [\"body[_ngcontent-%COMP%]{background-color:#0000}\"]\n  });\n  return CreateesperaComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}