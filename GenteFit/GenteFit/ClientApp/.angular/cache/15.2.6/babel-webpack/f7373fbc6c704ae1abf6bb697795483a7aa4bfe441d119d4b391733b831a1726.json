{"ast":null,"code":"import { of, catchError, Subscription, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HorariosService = /*#__PURE__*/(() => {\n  class HorariosService {\n    constructor(http) {\n      this.http = http;\n      this.urlHorario = 'http://localhost:5000/api/horario';\n      this.urlReserva = 'http://localhost:5000/api/reserva';\n      this.urlEspera = 'http://localhost:5000/api/espera';\n      this.res$ = new Subscription();\n      // Obtenemos todos los horarios\n      this.getHorarios = () => {\n        // Construimos la url\n        const url = `${this.urlHorario}`;\n        // Realizamos la petición\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          return of([]);\n        }));\n      };\n      // Obtenemos un horario\n      this.getHorario = id => {\n        // Construimos la url\n        const url = `${this.urlHorario}/${id}`;\n        // Realizamos la petición\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          return of([]);\n        }));\n      };\n      // Creamos un horario\n      this.createHorario = (id, horario) => {\n        // Construimos la url\n        const url = `${this.urlHorario}/${id}`;\n        // Realizamos la petición\n        try {\n          // Obtenemos los datos de la api\n          let res;\n          this.http.post(url, horario).subscribe(data => res = data);\n          return res;\n        } catch (error) {\n          console.log(error);\n          return of();\n        }\n      };\n      // Actualizamos un horario\n      this.updateHorario = horario => {\n        // Construimos la url\n        const url = `${this.urlHorario}/${horario.id}`;\n        // Realizamos la petición\n        try {\n          // Obtenemos los datos de la api\n          let res;\n          this.http.put(url, horario).subscribe(data => res = data);\n          return res;\n        } catch (error) {\n          console.log(error);\n          return of();\n        }\n      };\n      // Eliminamos un horario\n      this.deleteHorario = id => {\n        // Construimos la URL\n        const url = `${this.urlHorario}/${id}`;\n        // Realizamos la petición\n        try {\n          // Obtenemos los datos de la api\n          let res;\n          this.http.delete(url).subscribe(data => res = data);\n          return res;\n        } catch (error) {\n          console.log(error);\n          return of(false);\n        }\n      };\n      // Obtenemos los horarios de un usuario\n      // Obtenemos todas las reservas\n      this.getReservas = () => {\n        // Construimos la url\n        const url = `${this.urlReserva}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api.\n        return this.http.get(url).pipe(catchError(error => {\n          return of([]);\n        }));\n      };\n      // Obtenemos una reserva\n      this.getReserva = id => {\n        // Construimos la url\n        const url = `${this.urlReserva}/${id}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api.\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          return of([]);\n        }));\n      };\n      // Creamos una reserva\n      this.createReserva = (idCliente, idHorario, reserva) => {\n        //Construimos la url\n        const url = `${this.urlReserva}/${idCliente};${idHorario}`;\n        return this.http.post(url, reserva).pipe(catchError(error => {\n          return throwError(() => {\n            return {\n              ok: false,\n              error: error.error\n            };\n          });\n        }));\n      };\n      // TODO: Actualizamos una reserva\n      // Eliminamos una reserva\n      this.deleteReserva = id => {\n        // Construimos la URL\n        const url = `${this.urlReserva}/${id}`;\n        // Realizamos la petición\n        try {\n          // Obtenemos los datos de la api\n          let res;\n          this.http.delete(url).subscribe(data => res = data);\n          return res;\n        } catch (error) {\n          return of(false);\n        }\n      };\n      // Obtenemos todas las esperas\n      this.getEsperas = () => {\n        // Construimos la URL\n        const url = `${this.urlEspera}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api.\n        return this.http.get(url).pipe(catchError(error => {\n          return error.message;\n        }));\n      };\n      // Obtenemos una espera\n      this.getEspera = id => {\n        // Construimos la url\n        const url = `${this.urlEspera}/${id}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api.\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          return of([]);\n        }));\n      };\n      // Creamos una espera\n      this.createEspera = (idCliente, idHorario, espera) => {\n        // Construimos la url\n        const url = `${this.urlEspera}/${idCliente};${idHorario}`;\n        console.log(url, espera);\n        // Obtenemos los datos de la api\n        return this.http.post(url, espera).pipe(catchError(error => {\n          return throwError(() => {\n            return {\n              ok: false,\n              error: error.error\n            };\n          });\n        }));\n      };\n      // TODO: Actualizamos una espera\n      // Eliminamos una espera\n      this.deleteEspera = id => {\n        // Construimos la url\n        const url = `${this.urlEspera}/${id}`;\n        // Realizamos la petición\n        try {\n          // Obtenemos los datos de la API\n          let res;\n          this.http.delete(url).subscribe(data => res = data);\n          return res;\n        } catch (error) {\n          return of(false);\n        }\n      };\n    }\n  }\n  HorariosService.ɵfac = function HorariosService_Factory(t) {\n    return new (t || HorariosService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  HorariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HorariosService,\n    factory: HorariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return HorariosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}