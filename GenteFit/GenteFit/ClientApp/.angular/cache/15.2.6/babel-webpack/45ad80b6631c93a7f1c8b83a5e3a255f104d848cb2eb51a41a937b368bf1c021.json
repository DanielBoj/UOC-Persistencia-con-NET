{"ast":null,"code":"import { of, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClasesService = /*#__PURE__*/(() => {\n  class ClasesService {\n    constructor(http) {\n      this.http = http;\n      this.url = 'http://localhost:5000/api/clase';\n      // Obtenemos las clases\n      this.getClases = () => {\n        // Generamos la URL para la petición\n        const url = `${this.url}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un array de usuarios\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          // En caso de error devolvemos un array vacío\n          return of([]);\n        }));\n      };\n      // Obtenemos una clase por id\n      this.getClase = id => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/${id}`;\n        console.log(url.toString());\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un array de usuarios\n        return this.http.get(url).pipe(catchError(error => {\n          console.log(error);\n          // En caso de error devolvemos un array vacío\n          return of([]);\n        }));\n      };\n      // Creamos una nueva clase\n      this.createClase = clase => {\n        // Generamos la URL para la petición\n        const url = `${this.url}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un array de usuarios\n        // let res: any;\n        // this.http.post(url, clase).subscribe(data => res = data);\n        // return res;\n        try {\n          // Realizamos la petición\n          // Obtenemos los datos de la api, nos devuelve un array de usuarios\n          let res;\n          this.http.post(url, clase).subscribe(data => res = data);\n          return res;\n        } catch (error) {\n          console.log(error);\n          return of();\n        }\n      };\n      // Actualizamos una clase\n      this.updateClase = clase => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/${clase.id}`;\n        // Realizamos la petición\n        // Obtenemos los datos de la api, nos devuelve un array de usuarios\n        return this.http.put(url, clase).pipe(catchError(error => {\n          console.log(error);\n          // En caso de error devolvemos un array vacío\n          return of([]);\n        }));\n      };\n      // Borramos una clase\n      this.deleteClase = id => {\n        // Generamos la URL para la petición\n        const url = `${this.url}/${id}`;\n        try {\n          // Realizamos la petición\n          // Obtenemos los datos de la api, nos devuelve un array de usuarios\n          let res;\n          this.http.delete(url).subscribe(data => res = data);\n          return of(true);\n        } catch (error) {\n          console.log(error);\n          return of(false);\n        }\n      };\n    }\n  }\n  ClasesService.ɵfac = function ClasesService_Factory(t) {\n    return new (t || ClasesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ClasesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClasesService,\n    factory: ClasesService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClasesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}